name: Build sources
on:
  push:
    branches:
      - main
      - develop
    paths:
      - "src/**"
      - "public/**"
      - ".github/workflows/build.yaml"
  workflow_dispatch:  # Permet de déclencher manuellement le workflow

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 2G
      SCCACHE_VERSION: 0.3.0
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: google/wireit@setup-github-actions-caching/v1
      - name: Cache rust stuff
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            ~/.cargo/bin
            src/rust/**/target/
          key: ${{ runner.os }}-cargo3-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo3-
      - name: sccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-sccache-
      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown
      - name: Install build dependencies
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo ln -s $(which wasm-ld-13 || which wasm-ld-12 || which wasm-ld-11 || which wasm-ld-10) /usr/bin/wasm-ld

          # Install sccache first (required by RUSTC_WRAPPER)
          SCCACHE_FILE=sccache-v$SCCACHE_VERSION-x86_64-unknown-linux-musl
          curl -L https://github.com/mozilla/sccache/releases/download/v$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz | tar -xz
          sudo mv -f $SCCACHE_FILE/sccache /usr/local/bin/sccache
          sudo chmod +x /usr/local/bin/sccache

          # Install aidoku-cli from git source (includes --name flag support)
          cargo install --git https://github.com/Aidoku/aidoku-rs aidoku-cli
      - name: Build Rust sources
        run: |
          # Initialize counters
          INDIVIDUAL_SUCCESS=0
          INDIVIDUAL_FAIL=0
          TEMPLATE_SUCCESS=0
          TEMPLATE_FAIL=0
          INDIVIDUAL_BUILT=""
          INDIVIDUAL_FAILED=""
          TEMPLATE_BUILT=""
          TEMPLATE_FAILED=""

          # Build individual sources (fr.* directories)
          echo "=== Building Individual Sources ==="
          for src in ./src/rust/fr.*; do
            if [ -d "$src" ]; then
              SOURCE_NAME=$(basename "$src")
              echo "📦 Found source directory: $SOURCE_NAME"
              
              if [ -f "$src/build.sh" ]; then
                echo "🔨 Building individual source: $SOURCE_NAME"
                (
                  cd "$src" || exit 1
                  chmod +x build.sh
                  ./build.sh
                ) && {
                  echo "✅ Successfully built $SOURCE_NAME"
                  INDIVIDUAL_SUCCESS=$((INDIVIDUAL_SUCCESS + 1))
                  INDIVIDUAL_BUILT="$INDIVIDUAL_BUILT$SOURCE_NAME "
                } || {
                  echo "❌ Failed to build $SOURCE_NAME"
                  INDIVIDUAL_FAIL=$((INDIVIDUAL_FAIL + 1))
                  INDIVIDUAL_FAILED="$INDIVIDUAL_FAILED$SOURCE_NAME "
                }
              else
                echo "⚠️  No build.sh found in $SOURCE_NAME, skipping..."
              fi
            fi
          done

          echo "=== Building Template Sources ==="
          # Build template sources (non-fr.* directories) 
          for src in ./src/rust/*; do
            if [ -d "$src" ] && [[ ! "$(basename "$src")" =~ ^fr\. ]]; then
              TEMPLATE_NAME=$(basename "$src")
              echo "📦 Found template directory: $TEMPLATE_NAME"
              
              if [ -f "$src/build.sh" ]; then
                echo "🔨 Building template: $TEMPLATE_NAME"
                (
                  cd "$src" || exit 1
                  chmod +x build.sh
                  ./build.sh -a
                ) && {
                  echo "✅ Successfully built template $TEMPLATE_NAME"
                  TEMPLATE_SUCCESS=$((TEMPLATE_SUCCESS + 1))
                  TEMPLATE_BUILT="$TEMPLATE_BUILT$TEMPLATE_NAME "
                } || {
                  echo "❌ Failed to build template $TEMPLATE_NAME"
                  TEMPLATE_FAIL=$((TEMPLATE_FAIL + 1))
                  TEMPLATE_FAILED="$TEMPLATE_FAILED$TEMPLATE_NAME "
                }
              else
                echo "⚠️  No build.sh found in template $TEMPLATE_NAME, skipping..."
              fi
            fi
          done

          # Export variables for next steps
          echo "INDIVIDUAL_SUCCESS=$INDIVIDUAL_SUCCESS" >> $GITHUB_ENV
          echo "INDIVIDUAL_FAIL=$INDIVIDUAL_FAIL" >> $GITHUB_ENV
          echo "TEMPLATE_SUCCESS=$TEMPLATE_SUCCESS" >> $GITHUB_ENV
          echo "TEMPLATE_FAIL=$TEMPLATE_FAIL" >> $GITHUB_ENV
          echo "INDIVIDUAL_BUILT=$INDIVIDUAL_BUILT" >> $GITHUB_ENV
          echo "INDIVIDUAL_FAILED=$INDIVIDUAL_FAILED" >> $GITHUB_ENV
          echo "TEMPLATE_BUILT=$TEMPLATE_BUILT" >> $GITHUB_ENV
          echo "TEMPLATE_FAILED=$TEMPLATE_FAILED" >> $GITHUB_ENV

          echo "=== Quick Summary ==="
          echo "📊 Individual sources: $INDIVIDUAL_SUCCESS built, $INDIVIDUAL_FAIL failed"
          echo "📊 Templates: $TEMPLATE_SUCCESS built, $TEMPLATE_FAIL failed"
          ls -la ./src/rust/*/package.aix ./src/rust/*/*.aix 2>/dev/null || echo "No .aix packages found"
      - name: Repackage sources with aidoku
        run: |
          echo "=== Repackaging sources with aidoku package ==="
          
          # Repackage individual sources
          for src in ./src/rust/fr.*; do
            if [ -d "$src" ] && [ -f "$src/package.aix" ]; then
              SOURCE_NAME=$(basename "$src")
              echo "📦 Repackaging $SOURCE_NAME"
              (
                cd "$src"
                # Backup original package
                cp package.aix package.aix.bak
                rm -f package.aix
                
                # Run aidoku package with verbose output
                echo "   Running: RUSTUP_TOOLCHAIN=nightly aidoku package"
                RUSTUP_TOOLCHAIN=nightly aidoku package 2>&1 | tee package.log
                
                # Check if new package was created
                if [ -f "package.aix" ]; then
                  echo "✅ Successfully repackaged $SOURCE_NAME"
                  # Test if package is valid
                  unzip -t package.aix >/dev/null 2>&1 && echo "✓ Package is valid ZIP" || echo "✗ Package is invalid ZIP"
                  # Check internal structure
                  unzip -l package.aix 2>/dev/null | grep -E "(source.json|main.wasm)" && echo "✓ Has required files" || echo "✗ Missing required files"
                else
                  echo "❌ Failed to repackage $SOURCE_NAME - restoring original"
                  # Restore original if failed
                  mv package.aix.bak package.aix
                fi
              )
            fi
          done
          
          # Repackage template sources  
          for template_dir in ./src/rust/madara ./src/rust/mangastream ./src/rust/mmrcms; do
            if [ -d "$template_dir" ]; then
              for aix in "$template_dir"/*.aix; do
                if [ -f "$aix" ]; then
                  SOURCE_NAME=$(basename "$aix" .aix)
                  echo "📦 Repackaging template $SOURCE_NAME"
                  # Try to find source directory
                  SOURCE_DIR=""
                  if [ -d "$template_dir/sources/$SOURCE_NAME" ]; then
                    SOURCE_DIR="$template_dir/sources/$SOURCE_NAME"
                  elif [ -d "$template_dir/$SOURCE_NAME" ]; then
                    SOURCE_DIR="$template_dir/$SOURCE_NAME"
                  else
                    echo "❌ Cannot find source directory for $SOURCE_NAME"
                    continue
                  fi
                  
                  (
                    cd "$SOURCE_DIR"
                    echo "   Working in: $PWD"
                    echo "   Running: RUSTUP_TOOLCHAIN=nightly aidoku package"
                    RUSTUP_TOOLCHAIN=nightly aidoku package 2>&1 | tee package.log
                    
                    if [ -f "package.aix" ]; then
                      echo "✅ Successfully repackaged template $SOURCE_NAME"
                      unzip -t package.aix >/dev/null 2>&1 && echo "✓ Package is valid ZIP" || echo "✗ Package is invalid ZIP"
                      mv package.aix "$template_dir/$SOURCE_NAME.aix" 2>/dev/null || true
                    else
                      echo "❌ Failed to repackage template $SOURCE_NAME"
                    fi
                  )
                fi
              done
            fi
          done
          
          echo "=== Testing aidoku build locally ==="
          # Test if aidoku build can read a few packages
          TEST_COUNT=0
          for aix in $(find ./src/rust -name "*.aix" | head -3); do
            echo "Testing: $aix"
            aidoku build "$aix" -o test_output_$(basename "$aix" .aix) --name "Test" 2>&1 | head -5
            TEST_COUNT=$((TEST_COUNT + 1))
          done
          
          echo "=== Package structure analysis ==="
          for aix in $(find ./src/rust -name "*.aix"); do
            echo -n "$(basename "$aix"): "
            if unzip -l "$aix" 2>/dev/null | grep -q "source.json"; then
              echo "✓ has source.json"
            else
              echo "✗ missing source.json"
            fi
          done
          
          echo "=== Repackaging complete ==="
          ls -la ./src/rust/*/package.aix ./src/rust/*/*.aix 2>/dev/null || echo "No .aix packages found after repackaging"
      - name: Building source list
        run: |
          # Build sources to temporary directory
          mkdir -p build_output
          
          # Set source list name based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            SOURCE_NAME="JohanDevl's French Sources"
          else
            SOURCE_NAME="JohanDevl's French Sources (Development)"
          fi
          
          aidoku build ./src/rust/**/*.aix -o build_output --name "$SOURCE_NAME"

          # Copy aidoku build output to public directory (preserving website files)
          cp -r build_output/* public/

          echo "Final public directory contents:"
          ls -la public/
      - name: Deploy to GitHub Pages (main -> sources)
        uses: JamesIves/github-pages-deploy-action@v4.7.2
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          branch: sources
          folder: public
          git-config-name: GitHub Actions
          git-config-email: github-actions[bot]@users.noreply.github.com
          commit-message: Update source list
          single-commit: true
      - name: Deploy to GitHub Pages (develop -> sources-develop)
        uses: JamesIves/github-pages-deploy-action@v4.7.2
        if: ${{ github.ref == 'refs/heads/develop' }}
        with:
          branch: sources-develop
          folder: public
          git-config-name: GitHub Actions
          git-config-email: github-actions[bot]@users.noreply.github.com
          commit-message: Update source list
          single-commit: true
      - name: Uploading packages as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: packages
          path: public/sources/*.aix
          if-no-files-found: ignore
      - name: Uploading gh-pages deployment as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gh-pages
          path: public
          if-no-files-found: ignore
      - name: Build Summary Report
        if: always()
        run: |
          # Calculate totals
          TOTAL_SUCCESS=$((INDIVIDUAL_SUCCESS + TEMPLATE_SUCCESS))
          TOTAL_FAIL=$((INDIVIDUAL_FAIL + TEMPLATE_FAIL))
          TOTAL_ATTEMPTED=$((TOTAL_SUCCESS + TOTAL_FAIL))
          INDIVIDUAL_TOTAL=$((INDIVIDUAL_SUCCESS + INDIVIDUAL_FAIL))
          TEMPLATE_TOTAL=$((TEMPLATE_SUCCESS + TEMPLATE_FAIL))

          # Count packages created
          PACKAGE_COUNT=$(find . -name "*.aix" -type f | wc -l)
          TOTAL_SIZE=$(find . -name "*.aix" -type f -exec du -ch {} + | grep total$ | cut -f1 || echo "0")

          # Determine deployment branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            DEPLOY_BRANCH="sources"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            DEPLOY_BRANCH="sources-develop"
          else
            DEPLOY_BRANCH="none (not main or develop)"
          fi

          # Create GitHub Job Summary
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 🏗️ Build Summary Report

          ## 📊 Build Statistics

          | Category | ✅ Success | ❌ Failed | 📦 Total |
          |----------|------------|-----------|----------|
          | **Individual Sources (fr.*)** | %INDIVIDUAL_SUCCESS% | %INDIVIDUAL_FAIL% | %INDIVIDUAL_TOTAL% |
          | **Template Sources** | %TEMPLATE_SUCCESS% | %TEMPLATE_FAIL% | %TEMPLATE_TOTAL% |
          | **🎯 Total** | **%TOTAL_SUCCESS%** | **%TOTAL_FAIL%** | **%TOTAL_ATTEMPTED%** |

          ## ✅ Successfully Built Sources

          ### Individual Sources
          EOF
          
          # Add individual sources
          if [ -n "$INDIVIDUAL_BUILT" ]; then
            for source in $INDIVIDUAL_BUILT; do
              echo "- ✅ **$source**" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "- ℹ️ *No individual sources built*" >> $GITHUB_STEP_SUMMARY
          fi

          cat >> $GITHUB_STEP_SUMMARY << 'EOF'

          ### Template Sources
          EOF

          # Add template sources
          if [ -n "$TEMPLATE_BUILT" ]; then
            for template in $TEMPLATE_BUILT; do
              echo "- ✅ **$template**" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "- ℹ️ *No template sources built*" >> $GITHUB_STEP_SUMMARY
          fi

          # Add failed sources if any
          if [ $TOTAL_FAIL -gt 0 ]; then
            cat >> $GITHUB_STEP_SUMMARY << 'EOF'

          ## ❌ Failed Sources
          EOF
            if [ -n "$INDIVIDUAL_FAILED" ]; then
              echo "### Individual Sources" >> $GITHUB_STEP_SUMMARY
              for source in $INDIVIDUAL_FAILED; do
                echo "- ❌ **$source**" >> $GITHUB_STEP_SUMMARY
              done
            fi
            if [ -n "$TEMPLATE_FAILED" ]; then
              echo "### Template Sources" >> $GITHUB_STEP_SUMMARY
              for template in $TEMPLATE_FAILED; do
                echo "- ❌ **$template**" >> $GITHUB_STEP_SUMMARY
              done
            fi
          fi

          # Add package information
          cat >> $GITHUB_STEP_SUMMARY << EOF

          ## 📦 Package Information

          - **Total .aix packages**: $PACKAGE_COUNT
          - **Total size**: $TOTAL_SIZE
          - **Deployment branch**: \`$DEPLOY_BRANCH\`
          - **Artifacts uploaded**: packages, gh-pages

          ## 🔗 Useful Links

          - [📁 View Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [🌐 Deployed Sources](https://github.com/${{ github.repository }}/tree/$DEPLOY_BRANCH)
          - [📋 Source Repository](https://github.com/${{ github.repository }})

          ---
          *Build completed on $(date -u '+%Y-%m-%d %H:%M:%S UTC') • Commit: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})*
          EOF

          # Replace placeholders
          sed -i "s/%INDIVIDUAL_SUCCESS%/$INDIVIDUAL_SUCCESS/g" $GITHUB_STEP_SUMMARY
          sed -i "s/%INDIVIDUAL_FAIL%/$INDIVIDUAL_FAIL/g" $GITHUB_STEP_SUMMARY
          sed -i "s/%INDIVIDUAL_TOTAL%/$INDIVIDUAL_TOTAL/g" $GITHUB_STEP_SUMMARY
          sed -i "s/%TEMPLATE_SUCCESS%/$TEMPLATE_SUCCESS/g" $GITHUB_STEP_SUMMARY
          sed -i "s/%TEMPLATE_FAIL%/$TEMPLATE_FAIL/g" $GITHUB_STEP_SUMMARY
          sed -i "s/%TEMPLATE_TOTAL%/$TEMPLATE_TOTAL/g" $GITHUB_STEP_SUMMARY
          sed -i "s/%TOTAL_SUCCESS%/$TOTAL_SUCCESS/g" $GITHUB_STEP_SUMMARY
          sed -i "s/%TOTAL_FAIL%/$TOTAL_FAIL/g" $GITHUB_STEP_SUMMARY  
          sed -i "s/%TOTAL_ATTEMPTED%/$TOTAL_ATTEMPTED/g" $GITHUB_STEP_SUMMARY

          # Console output summary
          echo "🎉 Build Summary:"
          echo "   ✅ $TOTAL_SUCCESS sources built successfully"
          echo "   ❌ $TOTAL_FAIL sources failed"
          echo "   📦 $PACKAGE_COUNT .aix packages created ($TOTAL_SIZE)"
          echo "   🚀 Deployed to branch: $DEPLOY_BRANCH"
