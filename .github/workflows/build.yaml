name: Build sources
on:
  push:
    branches:
      - main
      - develop
    paths:
      - "src/**"
      - "public/**"
      - ".github/workflows/build.yaml"
  workflow_dispatch:  # Permet de déclencher manuellement le workflow

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 2G
      SCCACHE_VERSION: 0.3.0
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: google/wireit@setup-github-actions-caching/v1
      - name: Cache rust stuff
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            ~/.cargo/bin
            src/rust/**/target/
          key: ${{ runner.os }}-cargo3-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo3-
      - name: sccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-sccache-
      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown
      - name: Install build dependencies
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo ln -s $(which wasm-ld-13 || which wasm-ld-12 || which wasm-ld-11 || which wasm-ld-10) /usr/bin/wasm-ld

          # Install sccache first (required by RUSTC_WRAPPER)
          SCCACHE_FILE=sccache-v$SCCACHE_VERSION-x86_64-unknown-linux-musl
          curl -L https://github.com/mozilla/sccache/releases/download/v$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz | tar -xz
          sudo mv -f $SCCACHE_FILE/sccache /usr/local/bin/sccache
          sudo chmod +x /usr/local/bin/sccache

          # Install aidoku-cli from git source (includes --name flag support)
          cargo install --git https://github.com/Aidoku/aidoku-rs aidoku-cli
      - name: Build Rust sources with aidoku package
        run: |
          # Initialize counters
          INDIVIDUAL_SUCCESS=0
          INDIVIDUAL_FAIL=0
          TEMPLATE_SUCCESS=0
          TEMPLATE_FAIL=0
          
          # Build individual sources with aidoku package
          echo "=== Building Individual Sources with aidoku package ==="
          for src in ./src/rust/fr.*; do
            if [ -d "$src" ] && [ -f "$src/Cargo.toml" ]; then
              SOURCE_NAME=$(basename "$src")
              echo "📦 Building individual source: $SOURCE_NAME"
              (
                cd "$src" || exit 1
                rm -f package.aix
                RUSTUP_TOOLCHAIN=nightly aidoku package
                
                # Debug: Check what aidoku package created
                if [ -f "package.aix" ]; then
                  echo "   Created package.aix ($(stat -f%z package.aix 2>/dev/null || stat -c%s package.aix) bytes)"
                  # Test package structure
                  echo "   Package structure BEFORE repackaging:"
                  unzip -l package.aix | head -10
                  
                  # Repackage to remove Payload/ structure
                  echo "   Repackaging to remove Payload/ structure..."
                  mkdir -p temp_repack
                  unzip -q package.aix -d temp_repack
                  rm -f package.aix
                  cd temp_repack
                  if [ -d "Payload" ]; then
                    mv Payload/* . 2>/dev/null || true
                    rmdir Payload 2>/dev/null || true
                    echo "   Moved files from Payload/ to root"
                  fi
                  # Fix icon case sensitivity (Icon.png -> icon.png)
                  if [ -f "Icon.png" ]; then
                    mv Icon.png icon.png
                    echo "   Renamed Icon.png to icon.png"
                  fi
                  zip -q -r ../package.aix *
                  cd ..
                  rm -rf temp_repack
                  
                  echo "   Package structure AFTER repackaging:"
                  unzip -l package.aix | head -10
                fi
              ) && {
                echo "✅ Successfully built $SOURCE_NAME"
                INDIVIDUAL_SUCCESS=$((INDIVIDUAL_SUCCESS + 1))
              } || {
                echo "❌ Failed to build $SOURCE_NAME"
                INDIVIDUAL_FAIL=$((INDIVIDUAL_FAIL + 1))
              }
            fi
          done
          
          # Build template sources
          echo "=== Building Template Sources with aidoku package ==="
          for template_dir in ./src/rust/madara ./src/rust/mangastream ./src/rust/mmrcms; do
            if [ -d "$template_dir/sources" ]; then
              TEMPLATE_NAME=$(basename "$template_dir")
              echo "📦 Processing template: $TEMPLATE_NAME"
              
              for source_dir in "$template_dir/sources"/*; do
                if [ -d "$source_dir" ]; then
                  SOURCE_NAME=$(basename "$source_dir")
                  echo "🔨 Building template source: $TEMPLATE_NAME/$SOURCE_NAME"
                  (
                    cd "$source_dir" || exit 1
                    rm -f package.aix
                    RUSTUP_TOOLCHAIN=nightly aidoku package
                    
                    # Debug and properly move package
                    if [ -f "package.aix" ]; then
                      echo "   Created package.aix ($(stat -f%z package.aix 2>/dev/null || stat -c%s package.aix) bytes)"
                      
                      # Repackage to remove Payload/ structure
                      echo "   Repackaging to remove Payload/ structure..."
                      mkdir -p temp_repack
                      unzip -q package.aix -d temp_repack
                      rm -f package.aix
                      cd temp_repack
                      if [ -d "Payload" ]; then
                        mv Payload/* . 2>/dev/null || true
                        rmdir Payload 2>/dev/null || true
                        echo "   Moved files from Payload/ to root"
                      fi
                      # Fix icon case sensitivity (Icon.png -> icon.png)
                      if [ -f "Icon.png" ]; then
                        mv Icon.png icon.png
                        echo "   Renamed Icon.png to icon.png"
                      fi
                      zip -q -r ../package.aix *
                      cd ..
                      rm -rf temp_repack
                      
                      echo "   Package structure AFTER repackaging:"
                      unzip -l package.aix | head -10
                      
                      # Use correct path to move package (relative to sources/astralmanga -> madara/)
                      TARGET_PATH="../../$SOURCE_NAME.aix"
                      cp package.aix "$TARGET_PATH"
                      echo "   Moved to $TARGET_PATH"
                      # Verify it was moved
                      if [ -f "$TARGET_PATH" ]; then
                        echo "   ✓ Package successfully placed at $TARGET_PATH"
                      else
                        echo "   ✗ Failed to move package to $TARGET_PATH"
                      fi
                    else
                      echo "   ✗ No package.aix was created"
                    fi
                  )
                fi
              done
              
              # Count template packages
              TEMPLATE_COUNT=$(find "$template_dir" -maxdepth 1 -name "*.aix" -type f | wc -l)
              if [ $TEMPLATE_COUNT -gt 0 ]; then
                echo "✅ Built $TEMPLATE_COUNT sources for template $TEMPLATE_NAME"
                TEMPLATE_SUCCESS=$((TEMPLATE_SUCCESS + 1))
              else
                echo "❌ No sources built for template $TEMPLATE_NAME"
                TEMPLATE_FAIL=$((TEMPLATE_FAIL + 1))
              fi
            fi
          done
          
          echo "=== All packages created ==="
          echo "Individual packages:"
          ls -la ./src/rust/fr.*/package.aix 2>/dev/null || echo "  No individual packages found"
          echo "Template packages:"
          ls -la ./src/rust/madara/*.aix 2>/dev/null || echo "  No madara packages found"
          ls -la ./src/rust/mangastream/*.aix 2>/dev/null || echo "  No mangastream packages found"  
          ls -la ./src/rust/mmrcms/*.aix 2>/dev/null || echo "  No mmrcms packages found"
          
          echo "=== Testing aidoku build compatibility ==="
          # Test one package to see the actual error
          if [ -f "./src/rust/fr.lelscanfr/package.aix" ]; then
            echo "Testing fr.lelscanfr/package.aix:"
            aidoku build ./src/rust/fr.lelscanfr/package.aix -o test_build --name "Test" 2>&1 || true
          fi
          
          # Export variables for next steps
          echo "INDIVIDUAL_SUCCESS=$INDIVIDUAL_SUCCESS" >> $GITHUB_ENV
          echo "INDIVIDUAL_FAIL=$INDIVIDUAL_FAIL" >> $GITHUB_ENV
          echo "TEMPLATE_SUCCESS=$TEMPLATE_SUCCESS" >> $GITHUB_ENV
          echo "TEMPLATE_FAIL=$TEMPLATE_FAIL" >> $GITHUB_ENV
      - name: Building source list
        run: |
          # Build sources to temporary directory
          mkdir -p build_output
          
          # Set source list name based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            SOURCE_NAME="JohanDevl's French Sources"
          else
            SOURCE_NAME="JohanDevl's French Sources (Development)"
          fi
          
          # Collect all .aix files
          AIX_FILES=""
          for file in ./src/rust/fr.*/package.aix ./src/rust/madara/*.aix ./src/rust/mangastream/*.aix ./src/rust/mmrcms/*.aix; do
            if [ -f "$file" ]; then
              AIX_FILES="$AIX_FILES $file"
            fi
          done
          
          echo "Found .aix files: $AIX_FILES"
          
          # Test individual packages first
          echo "=== Testing individual packages for validation ==="
          for file in ./src/rust/fr.*/package.aix ./src/rust/madara/*.aix ./src/rust/mangastream/*.aix ./src/rust/mmrcms/*.aix; do
            if [ -f "$file" ]; then
              echo "Testing: $file"
              echo "  Package structure:"
              unzip -l "$file" | head -10 | sed 's/^/    /'
              
              aidoku build "$file" -o "test_$(basename "$file" .aix)" --name "Test" 2>&1 || echo "  ❌ Failed"
              if [ -f "test_$(basename "$file" .aix)/index.json" ]; then
                echo "  Generated index.json:"
                cat "test_$(basename "$file" .aix)/index.json" | sed 's/^/    /'
                sources_count=$(cat "test_$(basename "$file" .aix)/index.json" | grep -o '"sources":\s*\[' | wc -l)
                if [ $sources_count -gt 0 ]; then
                  echo "  ✅ Valid ($(cat "test_$(basename "$file" .aix)/index.json" | grep -o '"id":' | wc -l | tr -d ' ') sources)"
                else
                  echo "  ⚠️  Empty sources array"
                fi
              else
                echo "  ❌ No index.json generated"
              fi
              rm -rf "test_$(basename "$file" .aix)" 2>/dev/null || true
              echo ""
            fi
          done
          echo ""
          
          echo "=== aidoku CLI Information ==="
          aidoku --version || echo "aidoku version command failed"
          echo ""
          
          echo "=== Testing file content extraction ==="
          if [ -f "./src/rust/fr.phenixscans/package.aix" ]; then
            echo "Extracting fr.phenixscans source.json for inspection:"
            mkdir -p temp_inspect
            unzip -q "./src/rust/fr.phenixscans/package.aix" -d temp_inspect
            echo "Content of source.json:"
            cat temp_inspect/source.json | sed 's/^/  /'
            echo ""
            echo "Content of filters.json (first 10 lines):"
            head -10 temp_inspect/filters.json | sed 's/^/  /'
            rm -rf temp_inspect
          fi
          echo ""
          
          echo "Running: aidoku build $AIX_FILES -o build_output --name \"$SOURCE_NAME\""
          aidoku build $AIX_FILES -o build_output --name "$SOURCE_NAME" 2>&1 || { echo "aidoku build failed with exit code $?"; exit 1; }
          echo "aidoku build completed. Checking output..."
          ls -la build_output/ || echo "build_output directory not found"
          if [ -f build_output/index.json ]; then
            echo "Generated index.json content:"
            cat build_output/index.json
          else
            echo "No index.json generated!"
          fi

          # Copy aidoku build output to public directory (preserving website files)
          cp -r build_output/* public/

          echo "Final public directory contents:"
          ls -la public/
      - name: Deploy to GitHub Pages (main -> sources)
        uses: JamesIves/github-pages-deploy-action@v4.7.2
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          branch: sources
          folder: public
          git-config-name: GitHub Actions
          git-config-email: github-actions[bot]@users.noreply.github.com
          commit-message: Update source list
          single-commit: true
      - name: Deploy to GitHub Pages (develop -> sources-develop)
        uses: JamesIves/github-pages-deploy-action@v4.7.2
        if: ${{ github.ref == 'refs/heads/develop' }}
        with:
          branch: sources-develop
          folder: public
          git-config-name: GitHub Actions
          git-config-email: github-actions[bot]@users.noreply.github.com
          commit-message: Update source list
          single-commit: true
      - name: Uploading packages as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: packages
          path: public/sources/*.aix
          if-no-files-found: ignore
      - name: Uploading gh-pages deployment as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gh-pages
          path: public
          if-no-files-found: ignore
      - name: Build Summary Report
        if: always()
        run: |
          # Calculate totals
          TOTAL_SUCCESS=$((INDIVIDUAL_SUCCESS + TEMPLATE_SUCCESS))
          TOTAL_FAIL=$((INDIVIDUAL_FAIL + TEMPLATE_FAIL))
          TOTAL_ATTEMPTED=$((TOTAL_SUCCESS + TOTAL_FAIL))
          INDIVIDUAL_TOTAL=$((INDIVIDUAL_SUCCESS + INDIVIDUAL_FAIL))
          TEMPLATE_TOTAL=$((TEMPLATE_SUCCESS + TEMPLATE_FAIL))

          # Count packages created
          PACKAGE_COUNT=$(find . -name "*.aix" -type f | wc -l)
          TOTAL_SIZE=$(find . -name "*.aix" -type f -exec du -ch {} + | grep total$ | cut -f1 || echo "0")

          # Determine deployment branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            DEPLOY_BRANCH="sources"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            DEPLOY_BRANCH="sources-develop"
          else
            DEPLOY_BRANCH="none (not main or develop)"
          fi

          # Create GitHub Job Summary
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 🏗️ Build Summary Report

          ## 📊 Build Statistics

          | Category | ✅ Success | ❌ Failed | 📦 Total |
          |----------|------------|-----------|----------|
          | **Individual Sources (fr.*)** | %INDIVIDUAL_SUCCESS% | %INDIVIDUAL_FAIL% | %INDIVIDUAL_TOTAL% |
          | **Template Sources** | %TEMPLATE_SUCCESS% | %TEMPLATE_FAIL% | %TEMPLATE_TOTAL% |
          | **🎯 Total** | **%TOTAL_SUCCESS%** | **%TOTAL_FAIL%** | **%TOTAL_ATTEMPTED%** |

          ## ✅ Successfully Built Sources

          ### Individual Sources
          EOF
          
          # Add individual sources
          if [ -n "$INDIVIDUAL_BUILT" ]; then
            for source in $INDIVIDUAL_BUILT; do
              echo "- ✅ **$source**" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "- ℹ️ *No individual sources built*" >> $GITHUB_STEP_SUMMARY
          fi

          cat >> $GITHUB_STEP_SUMMARY << 'EOF'

          ### Template Sources
          EOF

          # Add template sources
          if [ -n "$TEMPLATE_BUILT" ]; then
            for template in $TEMPLATE_BUILT; do
              echo "- ✅ **$template**" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "- ℹ️ *No template sources built*" >> $GITHUB_STEP_SUMMARY
          fi

          # Add failed sources if any
          if [ $TOTAL_FAIL -gt 0 ]; then
            cat >> $GITHUB_STEP_SUMMARY << 'EOF'

          ## ❌ Failed Sources
          EOF
            if [ -n "$INDIVIDUAL_FAILED" ]; then
              echo "### Individual Sources" >> $GITHUB_STEP_SUMMARY
              for source in $INDIVIDUAL_FAILED; do
                echo "- ❌ **$source**" >> $GITHUB_STEP_SUMMARY
              done
            fi
            if [ -n "$TEMPLATE_FAILED" ]; then
              echo "### Template Sources" >> $GITHUB_STEP_SUMMARY
              for template in $TEMPLATE_FAILED; do
                echo "- ❌ **$template**" >> $GITHUB_STEP_SUMMARY
              done
            fi
          fi

          # Add package information
          cat >> $GITHUB_STEP_SUMMARY << EOF

          ## 📦 Package Information

          - **Total .aix packages**: $PACKAGE_COUNT
          - **Total size**: $TOTAL_SIZE
          - **Deployment branch**: \`$DEPLOY_BRANCH\`
          - **Artifacts uploaded**: packages, gh-pages

          ## 🔗 Useful Links

          - [📁 View Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [🌐 Deployed Sources](https://github.com/${{ github.repository }}/tree/$DEPLOY_BRANCH)
          - [📋 Source Repository](https://github.com/${{ github.repository }})

          ---
          *Build completed on $(date -u '+%Y-%m-%d %H:%M:%S UTC') • Commit: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})*
          EOF

          # Replace placeholders
          sed -i "s/%INDIVIDUAL_SUCCESS%/$INDIVIDUAL_SUCCESS/g" $GITHUB_STEP_SUMMARY
          sed -i "s/%INDIVIDUAL_FAIL%/$INDIVIDUAL_FAIL/g" $GITHUB_STEP_SUMMARY
          sed -i "s/%INDIVIDUAL_TOTAL%/$INDIVIDUAL_TOTAL/g" $GITHUB_STEP_SUMMARY
          sed -i "s/%TEMPLATE_SUCCESS%/$TEMPLATE_SUCCESS/g" $GITHUB_STEP_SUMMARY
          sed -i "s/%TEMPLATE_FAIL%/$TEMPLATE_FAIL/g" $GITHUB_STEP_SUMMARY
          sed -i "s/%TEMPLATE_TOTAL%/$TEMPLATE_TOTAL/g" $GITHUB_STEP_SUMMARY
          sed -i "s/%TOTAL_SUCCESS%/$TOTAL_SUCCESS/g" $GITHUB_STEP_SUMMARY
          sed -i "s/%TOTAL_FAIL%/$TOTAL_FAIL/g" $GITHUB_STEP_SUMMARY  
          sed -i "s/%TOTAL_ATTEMPTED%/$TOTAL_ATTEMPTED/g" $GITHUB_STEP_SUMMARY

          # Console output summary
          echo "🎉 Build Summary:"
          echo "   ✅ $TOTAL_SUCCESS sources built successfully"
          echo "   ❌ $TOTAL_FAIL sources failed"
          echo "   📦 $PACKAGE_COUNT .aix packages created ($TOTAL_SIZE)"
          echo "   🚀 Deployed to branch: $DEPLOY_BRANCH"
