name: Build sources old
on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 2G
      SCCACHE_VERSION: 0.3.0
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: google/wireit@setup-github-actions-caching/v1
      - name: Cache rust stuff
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            ~/.cargo/bin
            sources/**/target/
            templates/**/target/
          key: ${{ runner.os }}-cargo3-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo3-
      - name: sccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-sccache-
      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown
      - name: Install build dependencies
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo ln -s $(which wasm-ld-13 || which wasm-ld-12 || which wasm-ld-11 || which wasm-ld-10) /usr/bin/wasm-ld

          # Install sccache first (required by RUSTC_WRAPPER)
          SCCACHE_FILE=sccache-v$SCCACHE_VERSION-x86_64-unknown-linux-musl
          curl -L https://github.com/mozilla/sccache/releases/download/v$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz | tar -xz
          sudo mv -f $SCCACHE_FILE/sccache /usr/local/bin/sccache
          sudo chmod +x /usr/local/bin/sccache

          # Install aidoku-cli from git source
          cargo install --force --git https://github.com/Aidoku/aidoku-rs aidoku-cli
      - name: Build sources
        run: |
          # Initialize counters
          SUCCESS=0
          FAIL=0

          echo "=== Building All Sources ==="
          for src in ./sources/*; do
            if [ -d "$src" ] && [ -f "$src/Cargo.toml" ]; then
              SOURCE_NAME=$(basename "$src")
              echo "📦 Building source: $SOURCE_NAME"
              (
                cd "$src" || exit 1
                rm -f package.aix *.aix
                aidoku package
                # Get version for proper naming
                VERSION=$(grep -o '"version": *[0-9]*' res/source.json | grep -o '[0-9]*')
                # Rename package with version
                if [ -f "package.aix" ]; then
                  mv "package.aix" "${SOURCE_NAME}-v${VERSION}.aix"
                  echo "  ✅ Created ${SOURCE_NAME}-v${VERSION}.aix"
                fi
              ) && {
                SUCCESS=$((SUCCESS + 1))
              } || {
                echo "  ❌ Failed to build $SOURCE_NAME"
                FAIL=$((FAIL + 1))
              }
            fi
          done

          echo "=== Build Summary ==="
          echo "✅ $SUCCESS sources built successfully"
          echo "❌ $FAIL sources failed"

          # List all generated packages
          echo "=== Generated Packages ==="
          find ./sources -name "*.aix" -type f | while read package; do
            echo "  $(basename "$package")"
          done
      - name: Build source list
        run: |
          # Set source list name based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            SOURCE_NAME="JohanDevl's French Sources"
          else
            SOURCE_NAME="JohanDevl's French Sources (Development)"
          fi

          echo "Building source list: $SOURCE_NAME"
          aidoku build sources/*/*.aix -o build_output --name "$SOURCE_NAME"

          # Extract icons from packages
          echo "Extracting icons..."
          mkdir -p build_output/icons
          for package in ./sources/*/*.aix; do
            if [ -f "$package" ]; then
              PACKAGE_NAME=$(basename "$package" .aix)
              echo "  Extracting icon from $PACKAGE_NAME"
              unzip -p "$package" Payload/icon.png > "build_output/icons/${PACKAGE_NAME}.png" 2>/dev/null || true
            fi
          done

          # Copy to public directory
          cp -r build_output/* public/

          echo "=== Deployment Ready ==="
          ls -la public/
      - name: Deploy to GitHub Pages (main -> sources)
        uses: JamesIves/github-pages-deploy-action@v4.7.2
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          branch: sources
          folder: public
          git-config-name: GitHub Actions
          git-config-email: github-actions[bot]@users.noreply.github.com
          commit-message: Update source list
          single-commit: true
      - name: Deploy to GitHub Pages (develop -> sources-develop)
        uses: JamesIves/github-pages-deploy-action@v4.7.2
        if: ${{ github.ref == 'refs/heads/develop' }}
        with:
          branch: sources-develop
          folder: public
          git-config-name: GitHub Actions
          git-config-email: github-actions[bot]@users.noreply.github.com
          commit-message: Update source list
          single-commit: true
      - name: Upload packages as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: packages
          path: public/sources/*.aix
          if-no-files-found: ignore
      - name: Upload deployment as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gh-pages
          path: public
          if-no-files-found: ignore
